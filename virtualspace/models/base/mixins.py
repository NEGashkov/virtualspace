# Copyright (c) 2017 Nick Gashkov
#
# Distributed under MIT License. See LICENSE file for details.

"""Base mixins for models.

This module contains generic mixins for normal models' creation.

"""

from gettext import gettext as _

import sqlalchemy as sa
from sqlalchemy.ext.declarative import declared_attr


class BaseModelMixin(object):
    """Generic model mixin to inherit base models from.
    
    Usually there is no need to inherit from this class, see `Base` instead.
    There is declared very generic attributes such as table name and primary
    key for an entry.
    
    Class vars:
        __abstract__ (bool): Whether or not table will be generated for this 
            model in database schema.
    
    """

    __abstract__ = True

    @declared_attr
    def __tablename__(self):
        """Name of a table in database schema.
        
        `__tablename__` is taken by SQLAlchemy to create table in database. 
        Table name is generated by lowercasing model's name.
        
        Returns:
            str: Model's name that will become table's name stored in database.
        
        """
        return self.__class__.lower()

    id = sa.Column(sa.Integer, primary_key=True,
                   info={'verbose_name': _('id')})
